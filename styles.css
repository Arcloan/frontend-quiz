@font-face {
  font-family: "Rubik";
  src: url(assets/fonts/Rubik-VariableFont_wght.ttf);
}

/* 
  Set up the basic structure of the toggle component. 
  Using flexbox to align items and create spacing between the elements.
*/
.toggle {
  display: flex;
  align-items: center;
  position: relative;
  cursor: pointer; 
  gap: 1rem;
  flex-wrap: wrap;
}

/* 
  Hide the actual checkbox input but keep it accessible.
  Position it absolutely to cover the toggle switch area, making the entire area clickable.
*/
.toggle__input {
  position: absolute;
  opacity: 0;
  width: 100%;
  height: 100%;
}

/* 
  Styling the visual representation of the toggle switch.
  Using CSS variables for sizing and spacing, and applying a smooth transition for state changes.
*/
.toggle__display {
  --offset: 0.25em;
  --diameter: 0.875rem;

  display: inline-flex;
  align-items: center;
  justify-content: space-around;
  box-sizing: content-box;
  width: calc(var(--diameter) * 2 + var(--offset) * 2);
  height: calc(var(--diameter) + var(--offset) * 2);
  border: 0.1em solid var(--color-toggle-border);
  position: relative;
  border-radius: 100vw;
  background-color: var(--color-toggle-bg-default);
  transition: background-color 250ms, transform 250ms;
}

/* 
  The knob inside the toggle switch, which moves when toggled.
  Positioned absolutely inside the switch and centered vertically.
*/
.toggle__display::before {
  content: "";
  z-index: 2;
  position: absolute;
  top: 50%;
  inset-inline-start: var(--offset);
  box-sizing: border-box;
  width: var(--diameter);
  height: var(--diameter);
  border: 0.1em solid var(--color-toggle-border);
  border-radius: 50%;
  background-color: white;
  transform: translateX(0) translateY(-50%);
  will-change: transform;
  transition: transform 250ms;
}

/* 
  Focus-visible is used to apply the focus ring only when navigating via keyboard.
  This prevents the focus ring from appearing during mouse clicks, enhancing the visual experience.
*/
.toggle__input:focus-visible + .toggle__display {
  outline: 2px solid var(--color-focus-ring);
  outline-offset: 4px;
}

/* 
  Change the background color when the toggle is checked (active state).
  This applies the green color to indicate the "on" state.
*/
.toggle__input:checked + .toggle__display {
  background-color: var(--color-toggle-bg-checked); 
}

/* 
  Move the knob to the right when the toggle is checked.
  This visually represents the "on" state.
*/
.toggle__input:checked + .toggle__display::before {
  transform: translateX(100%) translateY(-50%);
}

:root {
  --color-toggle-bg-default: var(--purple); 
  --color-toggle-bg-checked: var(--purple); 
  --color-toggle-border: rgba(0, 0, 0, 0.2);
  --color-focus-ring: var(--purple);

  --purple: hsl(277, 91%, 56%);
  --darkest-grey: hsl(216, 25%, 25%);
  --medium-grey: hsl(215, 27%, 32%);
  --ligthest-grey: hsl(219, 13%, 44%);
  --darker-blue: hsl(216, 47%, 78%);
  --grey: hsl(220, 38%, 97%);
  --white: hsl(0, 0%, 100%);
  --green: hsl(151, 70%, 50%);
  --red: hsl(0, 82%, 63%);
}

*,
*::before, 
*::after {
  box-sizing: border-box;
}

* {
    margin: 0;
}

body {
  padding: 1rem;
  font-family: "Rubik";
  background-color: var(--grey);
  background-image: url(assets/images/pattern-background-mobile-light.svg);
}

.bar {
    margin-top: 1rem;
    width: 100%;
    height: 16px;
    border-radius: 100vmax;
    padding: 3px;
    border: 1px solid var(--white);
    background-color: var(--white);
}

.current {
    height: 100%;
    width: 50%;
    background-color: var(--purple);
    border-radius: 100vmax;
}

header {
    display: flex;
    justify-content: space-between;
}

.selected_topic {
    display: flex;
    gap: 0.75rem;
    align-items: center;
    font-weight: bolder;
    color: var(--darkest-grey);
}

.img_selected {
}

.light-dark-switch-container {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    margin-top: 0.25rem;
}

.question_box h1 span {
  color: var(--medium-grey);
  font-weight: lighter;
}

.question_box {
    margin-block-start: 2.5rem;

    & p {
      color: var(--medium-grey);
      font-style: italic;
    }
}

.question_box > * + * {
    margin-block-start: 1rem;
}

.topics, .answers {
    display: grid;
    gap: 1rem;
    margin-block-start: 2.5rem;
}

.topic {
  background-color: var(--white);
  
  & > div[class] {
    padding: 0.375rem;
  }
  
  & img {
    width: 2rem;
    aspect-ratio: 1;
  }

  & p {
    font-weight: bold;
  }
}

.topic, .submit, .answer {
    display: flex;
    gap: 1rem;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 0.75rem;
    border: 1px solid var(--white);
}

:is(.html_icon, .css_icon, .js_icon, .accessibility_icon, .img_selected) {
  border-radius: 0.2rem;
  width: 3rem;
  aspect-ratio: 1;
  display: grid;
  place-items: center;
}

.html_icon {
  background-color: hsla(0, 82%, 63%, 0.2);
}

.css_icon {
  background-color: hsla(151, 70%, 50%, 0.2);
}

.js_icon {
  background-color: hsla(216, 47%, 78%, 0.3);
}

.accessibility_icon {
  background-color: hsla(277, 91%, 56%, 0.2);
}

.choice {
  display: flex;
  gap: 1rem;
  align-items: center;
  padding: 0;

  & >:first-child {
    width: 2rem;
    padding: 0.5rem;
    border-radius: 0.2rem;
    aspect-ratio: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: hsla(216,47%, 78%, 0.3);
  }
}

.answer:hover > .choice {
  & >:first-child {
    background-color: hsla(277, 91%, 56%, 0.2);
    color: var(--purple);
  }
}

.answers img {
  width: 1.75rem;
}

.answer {
    padding: 1rem;
    justify-content: space-between;
    background-color: var(--white);
    border-color: var(--white);
}

.submit {
    justify-content: center;
    padding-block: 1rem;
    background-color: var(--purple);
    border-color: var(--purple);
    color: var(--white);

    &:hover {
      opacity: 0.5;
    }
}

.error {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
  color: var(--red);
}

.hidden {
    display: none;
}